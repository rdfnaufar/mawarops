# -*- coding: utf-8 -*-
"""topic_modeling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rIactENSGK3prhXo55XiFtlQdlAYkj0j
"""

import pandas as pd
from bertopic import BERTopic
from sklearn.feature_extraction.text import CountVectorizer
import joblib
import gensim
from gensim.corpora import Dictionary
from gensim.models.coherencemodel import CoherenceModel

def train_topic_model(texts, model_path="bertopic_model.pkl"):
    """
    Latih model BERTopic pada list teks (judul atau abstrak).
    """
    # Inisialisasi model
    topic_model = BERTopic()

    # Training model
    topics, probs = topic_model.fit_transform(texts)

    # Simpan model
    joblib.dump(topic_model, model_path)
    print(f"Model BERTopic disimpan di {model_path}")

    return topic_model, topics, probs

def evaluate_topic_model(model, texts):
    """
    Hitung coherence score (c_v) secara manual menggunakan Gensim.
    """
    # Ambil topik dari BERTopic
    topics = []
    for topic_id in model.get_topics():
        # Ambil 10 kata teratas untuk setiap topik
        words = [word for word, _ in model.get_topic(topic_id)]
        topics.append(words)

    # Preprocessing untuk Gensim (tokenisasi sederhana)
    tokenized_texts = [text.split() for text in texts]

    # Buat dictionary dan corpus
    dictionary = Dictionary(tokenized_texts)
    corpus = [dictionary.doc2bow(text) for text in tokenized_texts]

    # Hitung coherence
    coherence_model = CoherenceModel(
        topics=topics,
        texts=tokenized_texts,
        dictionary=dictionary,
        coherence='c_v'
    )
    coherence_score = coherence_model.get_coherence()
    print(f"Coherence Score: {coherence_score:.4f}")
    return coherence_score

def load_data_from_csv(csv_path='csv/cleaned_titles.csv'):
    """
    Load dan ambil teks dari file CSV hasil preprocessing.
    """
    df = pd.read_csv(csv_path)
    if 'Cleaned Title' not in df.columns:
        raise ValueError("Kolom 'Cleaned Title' tidak ditemukan.")
    return df['Cleaned Title'].tolist()
